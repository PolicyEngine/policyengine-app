name: Pull request

on:
  pull_request:
    branches: [ master ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: psf/black@stable
        with:
          options: ". -l 79 --check"

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Test on every node version that is supported
        # by our package.json.
        # Hopefully this allows us to catch problems
        # with differing versions ahead of time.
        node-version: [19.x]
      
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
        # https://docs.npmjs.com/cli/v9/commands/npm-ci
      - run: npm ci
      - run: npm run build
      - run: npm test

  build-and-screenshot:
    name: Add screenshots to PR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm ci

      - name: Start the app
        run: npm start &
        env:
          CI: true

      - name: Wait for the server
        run: sleep 30s

      - name: Install Puppeteer
        run: npm install puppeteer

      - name: Take screenshots
        id: screenshot
        run: |
          echo "Taking screenshots..."
          set -e
          URLS=$(echo ${{ github.event.pull_request.body }} | grep -o 'https://policyengine.org/[a-zA-Z0-9/_-]*')
          echo "URLS: $URLS"
          URLS=$(echo $URLS | sed 's/https:\/\/policyengine.org/http:\/\/localhost:3000/g')
          echo "URLS: $URLS"
          SCREENSHOT_PATHS=""
          for url in $URLS; do
            FILENAME=$(echo $url | sed 's/https:\/\/policyengine.org\//screenshot_/g' | sed 's/\//_/g').png
            echo "FILENAME: $FILENAME"
            node -e "const puppeteer = require('puppeteer'); (async () => { const browser = await puppeteer.launch(); const page = await browser.newPage(); await page.setViewport({ width: 1280, height: 720 }); await page.goto('$url', {waitUntil: 'networkidle2'}); await page.screenshot({path: '$FILENAME'}); await browser.close(); })()"
            SCREENSHOT_PATHS="$SCREENSHOT_PATHS $FILENAME"
          done
          echo "::set-output name=paths::$SCREENSHOT_PATHS"
          echo "Screenshot paths: $SCREENSHOT_PATHS"



      - name: Upload screenshots
        uses: actions/upload-artifact@v2
        with:
          name: screenshots
          path: ${{ steps.screenshot.outputs.paths }}

      - name: Add comment
        if: steps.screenshot.outputs.paths != ''
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const paths = '${{ steps.screenshot.outputs.paths }}'.split(' ').filter(path => path !== '');
            const issue_number = context.payload.pull_request.number;

            async function createCommentWithScreenshots() {
              let body = '### Screenshots\n';

              for (const path of paths) {
                const url = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${path}/raw`;
                body += `![${path}](${url})\n`;
              }

              await github.issues.createComment({
                issue_number: issue_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

            createCommentWithScreenshots();
